import asyncio
import json
import openai

openai.api_key = "your_openai_api_key"

# Define scoring logic for each category
def calculate_personal_profile_score(candidate):
    score = 100
    if not candidate.get("name") or not candidate.get("email") or not candidate.get("phone"):
        score -= 20  # Deduct points for missing contact details
    if not candidate.get("linkedin") or "linkedin.com" not in candidate.get("linkedin", ""):
        score -= 10  # Deduct points for missing or invalid LinkedIn
    return max(score, 0)

def calculate_education_score(candidate):
    score = 100
    education = candidate.get("education", [])
    for edu in education:
        if edu.get("degree") and edu.get("institution"):
            if edu.get("end_date") and edu.get("start_date") and edu["start_date"] > edu["end_date"]:
                score -= 20  # Deduct points for unrealistic timelines
        else:
            score -= 10  # Deduct points for missing details
    return max(score, 0)

def calculate_professional_score(candidate):
    score = 100
    experience = candidate.get("experience", [])
    for job in experience:
        if job.get("company") and job.get("role"):
            if job.get("end_date") and job.get("start_date") and job["start_date"] > job["end_date"]:
                score -= 20  # Deduct points for unrealistic timelines
        else:
            score -= 10  # Deduct points for missing details
    return max(score, 0)

def calculate_project_score(candidate):
    score = 100
    projects = candidate.get("projects", [])
    for project in projects:
        if not project.get("technologies") or not project.get("description"):
            score -= 10  # Deduct points for vague or incomplete project details
    return max(score, 0)

def calculate_skills_score(candidate):
    score = 100
    skills = candidate.get("skills", [])
    if len(skills) == 0:
        score -= 20  # Deduct points for missing skills
    return max(score, 0)

def calculate_other_characteristics_score(candidate):
    score = 100
    if candidate.get("ai_generated", False):
        score -= 30  # Deduct points for AI-generated content
    if not candidate.get("consistency_check", True):
        score -= 20  # Deduct points for inconsistencies
    return max(score, 0)

def calculate_overall_score(candidate):
    personal_score = calculate_personal_profile_score(candidate)
    education_score = calculate_education_score(candidate)
    professional_score = calculate_professional_score(candidate)
    project_score = calculate_project_score(candidate)
    skills_score = calculate_skills_score(candidate)
    other_score = calculate_other_characteristics_score(candidate)
    
    overall_score = (personal_score + education_score + professional_score +
                     project_score + skills_score + other_score) / 6
    return round(overall_score, 2)

# Scoring candidates with categories
async def process_candidates(job_description, candidates):
    results = []
    for candidate in candidates:
        # Calculate scores for each category
        overall_score = calculate_overall_score(candidate)
        
        # Use OpenAI for job-specific matching
        ai_score = await calculate_match_score_async(job_description, candidate["resume"])
        
        # Combine scores (e.g., 70% from the scoring categories, 30% from OpenAI)
        final_score = round(0.7 * overall_score + 0.3 * ai_score, 2)
        
        results.append({
            "id": candidate["id"],
            "name": candidate["name"],
            "personal_score": calculate_personal_profile_score(candidate),
            "education_score": calculate_education_score(candidate),
            "professional_score": calculate_professional_score(candidate),
            "project_score": calculate_project_score(candidate),
            "skills_score": calculate_skills_score(candidate),
            "other_characteristics_score": calculate_other_characteristics_score(candidate),
            "overall_score": overall_score,
            "ai_score": ai_score,
            "final_score": final_score,
            "verified": candidate["verified"]
        })
    return sorted(results, key=lambda x: x["final_score"], reverse=True)

# Match score using OpenAI (unchanged)
async def calculate_match_score_async(job_description, candidate_resume):
    prompt = (
        f"Match the following job description with the candidate's resume and score the compatibility on a scale of 0 to 100. "
        f"Provide only the score as output.\n\n"
        f"Job Description:\n{job_description}\n\n"
        f"Candidate Resume:\n{candidate_resume}"
    )
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=10,
            temperature=0
        )
        score = int(response['choices'][0]['message']['content'].strip())
        return score
    except (ValueError, KeyError):
        return 0  # Default to 0 if the score cannot be determined

# Example usage
async def main():
    job_description = "Looking for a data analyst proficient in SQL, Python, and Tableau."
    candidates = [
        {
            "id": 1,
            "name": "Alice",
            "email": "alice@example.com",
            "phone": "1234567890",
            "linkedin": "https://linkedin.com/in/alice",
            "resume": "Experienced in SQL, Python, Tableau. Worked as a data analyst for 3 years.",
            "education": [{"degree": "MSc", "institution": "UCLA", "start_date": "2015", "end_date": "2017"}],
            "experience": [{"company": "ABC Corp", "role": "Data Analyst", "start_date": "2017", "end_date": "2020"}],
            "projects": [{"description": "Airline satisfaction analysis", "technologies": ["Python", "SQL"]}],
            "skills": ["SQL", "Python", "Tableau"],
            "verified": True,
            "ai_generated": False,
            "consistency_check": True
        },
        # Add more candidate dictionaries...
    ]
    
    top_candidates = await process_candidates(job_description, candidates)
    print(json.dumps(top_candidates, indent=4))

asyncio.run(main())
